import numpy as np
import matplotlib.pyplot as plt

data_text = """
-49.50477618213177,4786.66465700644
-42.37690022584894,3951.7056084222504
-47.637456368670264,4478.898279335325
-48.52228916359815,4478.987501666582
-29.697505434032713,2750.9821999002643
20.71193244892872,783.2821839548324
17.720868386131713,274.06054113412625
-12.001719821948363,360.87646702840067
32.72117073288274,1794.8451918316437
-13.41170713085026,145.0988946295538
-9.234585683434048,32.78108338911238
-11.44377457181809,450.0216129256001
34.230316223920866,2118.629842618174
-12.202986751579004,285.80273363877427
43.93237343741271,3465.3510479277916
-14.908415182927804,488.028126274146
-35.64023197891872,2797.224311237816
6.11256845943231,-522.0065851721035
-14.90118186911873,484.41504337286494
-47.408148186488106,4307.16039242281
49.95506989762261,5466.133994650656
-12.130453682542594,855.3919921185328
45.66612025714679,4253.368981708695
-45.80243867901935,4587.772405177172
49.362836399589085,5079.977455983918
37.64261424657144,2745.69409556146
14.139659841753854,398.2761537923216
-32.82827722144819,1889.7101974047991
15.172564575903493,687.3434423852439
-31.74624866016127,2263.499313852498
-49.724665268845655,5280.733049098388
20.59258429296024,1072.7867754893389
0.1630279133031607,325.9183265590344
46.05742662693687,4302.974922399931
-25.73488610922623,1159.6775223072848
-7.126018560209488,-232.43058644586426
34.43921510342807,2909.7609558921304
-40.44743531938069,3334.6614347483696
48.58040750879778,5155.98863250369
-7.9688689021314545,-171.93177824206435
-8.34442849702669,-89.28437028673596
-47.754362171235265,4312.004225763797
-1.5625879272237384,-31.50989182226374
-14.461448672718156,393.24860405283135
-47.08610018533768,4704.709934998579
0.4191076995687766,115.4353465109353
-1.806920462329522,22.660435569760047
-14.655267614257326,401.87390732768137
39.344162380741736,3102.537806839088
-33.99119464697789,2294.939580936612
23.702932787711376,1333.9797736187695
-15.172199878236938,-66.2768529087661
19.99730203249507,764.9171840341643
32.4665363166267,2112.7753854718653
-17.350376474298024,876.3274956839506
10.223042538916808,474.08590316122434
46.11434090332706,4231.627727790036
-31.8410191462999,1422.5499325061057
26.21633979064704,1294.1013284280034
32.793612496733175,2460.209214203973
-37.16436718063903,2702.7596356223316
39.812421056760286,3139.061189864222
-31.661380105595704,2134.3880933954283
-41.977676805082076,3908.114448921906
-46.04738011318917,3867.473282232967
25.512090878104004,1341.6817062626337
27.74090809707245,1718.8673874700482
47.98601467975115,4569.733662354848
49.71605858104334,5225.812528629438
28.057491864396766,2086.540844622966
-12.639729158547084,437.9933721394672
-1.1645394580345112,379.3871181286385
5.823525348936144,124.6837943349453
-44.18671822952721,4201.682639944181
47.295918543443236,4411.3311718246005
-43.938770816912985,3820.121489159822
19.541306440111654,837.3897078226222
17.97225339779088,-37.24912367297554
26.63806949375177,1641.053343727091
39.85903414396007,3369.970487902158
25.290886419720337,1001.0136574595405
-6.436833704239518,-327.2857894951604
29.728313137229947,1530.828863366251
-13.823202068698812,524.8170427505654
-20.45686453922617,890.1411067361717
30.738361515925504,1731.6127811491895
27.903980583504563,1622.2010875082915
-49.58327883379505,5204.1864705425105
-42.876104605591706,3565.238381712062
4.420824477979103,433.34007848080495
-0.09825791858339983,-95.54774784526131
7.201981513743981,243.46449303128873
29.457043780526917,1440.3833395312056
-46.012180161923055,4719.795958090902
-12.148987422656319,376.57437570730497
48.69708628605339,4933.943938785509
48.43584255366089,4251.1750688831835
-10.768542110549895,387.60202731921123
15.27361447085984,308.8067851708678
-38.795958911151914,2777.5229202947
43.19925107374914,4354.631897384679
-43.26688592848913,3948.66913834865
12.941888166344548,52.14421381740158
-31.438249298372234,1801.2398046285116
48.427589182465454,4526.388087018641
43.09837613290544,3108.9037203930575
41.72921515237334,3799.4576013195156
-22.967099151792258,804.8808943312447
14.737857044044134,92.56761918049295
-17.76087363161531,670.2502245323193
39.332850205201,3297.1958003774917
-1.8628708169956951,-231.17638950976507
42.0384053380548,3347.564167893621
-13.2190225136275,337.2674532941173
-13.47630932074022,803.3615206345589
-4.650502492845796,-33.67362401982824
13.498183240037932,544.7565863566937
30.858039315972746,2397.2808985178026
48.194217081826764,4939.929853877463
-38.69786922436591,3511.055640094936
-37.33794895575036,2806.7850069180145
11.311272213927396,578.3541036384112
42.943554420342195,3600.6404650272807
10.798343342959015,590.2992006490897
16.609422880962427,282.9536416936534
17.816653449708667,1100.8324083564694
6.72982030452016,-218.78668418019936
22.398564233144796,947.0672535054713
23.67361778275456,1130.4171116574248
-33.5836523997537,1456.439980526976
1.1835811860980243,-2.8493292044511698
16.854985969790178,657.2030055928124
38.456452594732625,2763.503655116109
-32.4706493753534,2111.5729335680353
-22.74293277284507,1076.8212975499457
-3.6423106594163386,146.97371945887983
28.72197391095284,2319.557787037792
-40.45450038111852,3042.1385794127327
-24.92093345997842,1293.1421222619863
-22.153738800901234,641.1028452905616
5.191094183428234,559.4322181477613
-43.83437085985562,3567.531948537513
-12.26679985040299,498.95060214676175
-7.540709001438152,121.39395492919422
-7.926135654119939,-21.143415528819446
-39.21825498396383,3625.609835130688
42.07175126129877,3642.9942307013657
-14.492396666686226,342.8916062309598
38.160399942767654,2723.4332713004947
19.75195869104985,1161.6279210084228
-46.808455889385684,4948.615417104177
31.221350207101068,2131.7791236961566
21.126051883360688,1033.4042870980743
41.73761591938349,3147.800972782943
38.398062775027455,2829.0815748086984
7.232591236480893,-130.3380348763469
-11.038061681434527,176.10805615298074
22.09198369702139,1265.4610777897362
-12.002316137291217,475.77499367504663
28.158305569700417,2062.2936818853286
-23.972660617741493,1172.7504290522318
22.660232288678685,1243.31733275978
3.589490797822833,274.684667263169
35.345599178656286,2619.0990697937077
44.64678354299822,3945.739251810126
14.329219989353675,431.9166082874948
37.97282732341152,2618.539045739298
17.29538047132843,1186.6815872298425
0.801386612278641,-74.7069238519625
-7.488293558533655,480.207950747228
24.31729119444246,305.618743763869
44.59273495714645,4219.366956268538
-43.08895359105587,4072.9843934209794
42.527106263328335,3309.0784867451403
-8.442010390805265,142.10924900561935
11.880039569963074,-6.077437610502216
-29.267871877219076,1681.6030634811423
10.421838090700398,189.79208937053454
-21.021138350990356,1077.274103433816
18.893954576449573,913.749132163424
-17.642143128092023,695.9301552162748
-37.21568787400837,2849.5579428349233
-20.17950741135618,814.8144725322278
33.39997277542909,2205.90765426266
37.45606896434448,2623.906560797001
30.385790972647015,1594.6280129502718
21.25128062106421,923.6352530242654
-31.08827726350253,2071.945886044554
-16.646860868020674,-135.56811099212302
-19.167092308335555,362.908332387428
-9.820599703937738,143.84139793266883
29.42650809166608,1504.510645555607
-29.750908777386908,2106.076419242312
25.27204078581697,1096.2896468994606
47.564075164148505,4600.600552068048
-9.098005727088918,54.23097377003893
28.518683499741954,1934.4746249485008
16.640496974074082,522.4912216148725
48.20456380524615,4454.85716284111
-33.72148642760878,2419.992104608621
20.0,5.0
-20.0,200.0
30.0,1000.0
-10.0,1500.0
0.0,500.0
"""

data = np.array([list(map(float, line.split(','))) for line in data_text.strip().split('\n')])

x_train = data[:, 0]  # İlk sütun (X)
y_train = data[:, 1]  # İkinci sütun (Y)

#computer error by using least squares 
def compute_error(x,y,w,b):
    sum=0
    m=x_train.shape[0]
    for i in range(m):
        m+=1
        sum+=((x[i]*w+b)-y[i])
    return (sum*sum)/(2*m)

#print error when w and b 0
print(compute_error(x_train,y_train,0,0))


# find new bias and weight by gradient descent 
def compute_gradient(x,y,w,b):
    dj_dw=0
    dj_db=0
    m=len(x)
    for i in range(m):
        dj_dw+=((w*x[i]+b)-y[i])*x[i]
        dj_db+=((w*x[i]+b)-y[i])
    return dj_dw/m,dj_db/m

def gradient_descent(x,y,w,b,alpha,iter):

    for i in range(iter):
        dj_dw,dj_db=compute_gradient(x,y,w,b)
        w=w-alpha*dj_dw
        b=b-alpha*dj_db
    return w, b


def compute_alpha():
    return 0.0020
    
    

w_final, b_final = gradient_descent(x_train ,y_train,0,0,compute_alpha(),6000)

plt.scatter(x_train,y_train)
y=w_final*x_train+b_final  
print(w_final,b_final)
y=x_train*w_final+b_final
print(compute_error(x_train,y_train,w_final,b_final))

plt.plot(x_train,y,w_final,b_final)
plt.show()


